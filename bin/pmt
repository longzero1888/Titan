#!/usr/bin/env node

var commander = require('commander');
var pkg = require('../package.json');

var pmt = require('../index');

//basic infomation
commander
    .version(pkg.version)

//options
commander
    .option('-a, --all', 'list all commands')

//commands
commander
    .command('start [appName]')
    .description('start description, 待根据CLI提供的api完善')
    .action(function(appName, options) {

        if (typeof appName == 'undefined'){
            console.log('Please input [appName]/all after stop');
        } else if (appName == 'all'){
            pmt.startAppAll(pmt.disconnect);
        } else {
            pmt.startAppWithName(appName, pmt.disconnect);
        }
    });
commander
    .command('kill [appName]')
    .description('默认kill Daemon,输入appName,则kill相应app；待根据CLI提供的api完善')
    .action(function(appName) {
        //kill daemon
        if (typeof appName == 'undefined') {
            pmt.kill(pmt.disconnect);
        }
    });
commander
    .command('stop [appName]')
    .action(function(appName) {
        //kill daemon
        if (typeof appName == 'undefined') {
            console.log('Please input [appName]/all after stop');
        } else if (appName == 'all'){
            pmt.stopAppAll(pmt.disconnect);
        } else {
            pmt.stopAppWithName(appName, pmt.disconnect);
        }
    })

commander
    .command('restart [appName]')
    .action(function(appName) {
        //kill daemon
        if (typeof appName == 'undefined') {
            console.log('Please input [appName]/all after stop');
        } else if (appName == 'all'){
            pmt.restartAppAll(pmt.disconnect);
        } else {
            pmt.restartAppWithName(appName, pmt.disconnect);
        }
    })

commander.parse(process.argv);
